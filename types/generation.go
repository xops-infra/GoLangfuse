package types

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

// GenerationEvent An event represents a discrete event in a trace.
// Usually, you want to add an event nested within a trace. Optionally you can nest it within another observation by
// providing a parent_observation_id. If no trace_id is provided, a new trace is created just for this event.
// Fields:
//   - ID the id of the generation can be set, defaults to random id.
//   - Name identifier of the generation. Useful for sorting/filtering in the UI.
//   - TraceID the trace ID associated with this generation. If not provided, a new trace is created.
//   - StartTime the time at which the generation started, defaults to the current time.
//   - CompletionStartTime The time at which the completion started. Used for latency analytics broken down into time until completion started and completion duration.
//   - EndTime the time at which the generation ended.
//   - Metadata additional metadata of the generation. Can be any JSON object. Metadata is merged when being updated via the API.
//   - Model the name of the model used for the generation.
//   - Input the prompt used for the generation. Can be any string or JSON object.
//   - Output the completion generated by the model. Can be any string or JSON object.
//   - Level the level of the generation. Used for sorting/filtering of traces with elevated error levels and for highlighting in the UI.
//   - StatusMessage the additional field for context of the event. E.g. the error message of an error event.
//   - ParentObservationID the ID of the parent observation, if applicable.
//   - Version the version of the generation type. Used to understand how changes to the span type affect metrics. Useful in debugging.
//   - ModelParameters the parameters of the model used for the generation, can be any key-value pairs.
//   - Usage the usage object. Refer [automatically infer](https://langfuse.com/docs/model-usage-and-cost) for more details.
//   - PromptVersion a prompt version
//   - PromptName a prompt name
type GenerationEvent struct {
	ID                  *uuid.UUID     `json:"id" valid:"-"`
	Name                string         `json:"name,omitempty" valid:"-"`
	TraceID             *uuid.UUID     `json:"traceId,omitempty" valid:"-"`
	StartTime           *time.Time     `json:"startTime,omitempty" valid:"-"`
	CompletionStartTime *time.Time     `json:"completionStartTime,omitempty" valid:"-"`
	EndTime             *time.Time     `json:"endTime,omitempty" valid:"-"`
	Metadata            map[string]any `json:"metadata,omitempty" valid:"-"`
	Model               string         `json:"model,omitempty" valid:"-"`
	Input               any            `json:"input,omitempty" valid:"-"`
	Output              any            `json:"output,omitempty" valid:"-"`
	Level               Level          `json:"level,omitempty" valid:"-"`
	StatusMessage       string         `json:"statusMessage,omitempty" valid:"-"`
	ParentObservationID *uuid.UUID     `json:"parentObservationId,omitempty" valid:"-"`
	Version             string         `json:"version,omitempty" valid:"-"`
	ModelParameters     map[string]any `json:"modelParameters,omitempty" valid:"-"`
	Usage               Usage          `json:"usage,omitempty" valid:"-"`
	UsageDetails        UsageDetail    `json:"usageDetails,omitempty" valid:"-"`
	PromptVersion       int            `json:"promptVersion,omitempty" valid:"range(0|9999)"`
	PromptName          string         `json:"promptName,omitempty" valid:"-"`
}

// GetID return an event ID
func (t *GenerationEvent) GetID() *uuid.UUID {
	return t.ID
}

// SetID set event ID
func (t *GenerationEvent) SetID(id *uuid.UUID) {
	t.ID = id
}

// Error set Level to error and EndTime with status message
func (t *GenerationEvent) Error(statusMessage string, args ...any) *GenerationEvent {
	t.StatusMessage = fmt.Sprintf(statusMessage, args...)
	t.Level = Error
	return t.End()
}

// End set end time to now
func (t *GenerationEvent) End() *GenerationEvent {
	now := time.Now().UTC()
	t.EndTime = &now
	return t
}

// Start set start time to now
func (t *GenerationEvent) Start() *GenerationEvent {
	now := time.Now().UTC()
	t.StartTime = &now
	return t
}

// GenerationBuilder provides a fluent interface for building GenerationEvent
type GenerationBuilder struct {
	generation *GenerationEvent
}

// NewGeneration creates a new GenerationBuilder
func NewGeneration() *GenerationBuilder {
	now := time.Now().UTC()
	return &GenerationBuilder{
		generation: &GenerationEvent{
			StartTime: &now,
			Level:     Default,
		},
	}
}

// WithID sets the generation ID
func (b *GenerationBuilder) WithID(id uuid.UUID) *GenerationBuilder {
	b.generation.ID = &id
	return b
}

// WithName sets the name
func (b *GenerationBuilder) WithName(name string) *GenerationBuilder {
	b.generation.Name = name
	return b
}

// WithTraceID sets the trace ID
func (b *GenerationBuilder) WithTraceID(traceID uuid.UUID) *GenerationBuilder {
	b.generation.TraceID = &traceID
	return b
}

// WithModel sets the model
func (b *GenerationBuilder) WithModel(model string) *GenerationBuilder {
	b.generation.Model = model
	return b
}

// WithInput sets the input
func (b *GenerationBuilder) WithInput(input any) *GenerationBuilder {
	b.generation.Input = input
	return b
}

// WithOutput sets the output
func (b *GenerationBuilder) WithOutput(output any) *GenerationBuilder {
	b.generation.Output = output
	return b
}

// WithMetadata sets the metadata
func (b *GenerationBuilder) WithMetadata(metadata map[string]any) *GenerationBuilder {
	b.generation.Metadata = metadata
	return b
}

// WithUsage sets the usage
func (b *GenerationBuilder) WithUsage(usage Usage) *GenerationBuilder {
	b.generation.Usage = usage
	return b
}

// WithPrompt sets the prompt name and version
func (b *GenerationBuilder) WithPrompt(name string, version int) *GenerationBuilder {
	b.generation.PromptName = name
	b.generation.PromptVersion = version
	return b
}

// WithParentObservation sets the parent observation ID
func (b *GenerationBuilder) WithParentObservation(parentID uuid.UUID) *GenerationBuilder {
	b.generation.ParentObservationID = &parentID
	return b
}

// WithModelParameters sets the model parameters
func (b *GenerationBuilder) WithModelParameters(params map[string]any) *GenerationBuilder {
	b.generation.ModelParameters = params
	return b
}

// Build returns the built GenerationEvent
func (b *GenerationBuilder) Build() *GenerationEvent {
	return b.generation
}
